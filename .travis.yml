language: c

compiler: gcc

env:
    global:
        # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
        #   via the "travis encrypt" command using the project repo's public key
        - secure: "BPP6SZ50idXkIPERv5Z+Q2OCvGHHEKI27icS60VnduwT3rtwZBmS2TBPAZugVdxk8AlP9txRidyGjKrliQ8j7KquqNj8RXW86Akok0/gRSWidxUsaWccCYQ00ynDQsil8hAQw3vZHiIdRVDrVYHrvSZeIPqBpfwC/i3zCUpsEoA="
        - BUILD=autotools


git:
  depth: 1

matrix:
  include:
    - compiler: gcc
      env: BUILD=cmake
    - compiler: clang
      env: BUILD=cmake CMAKE_OPTION="-DUSE_VALGRIND=no -DNO_UNDEFINED=no" CFLAGS="-fsanitize=address -fsanitize=undefined"
    - compiler: gcc
      env: BUILD=cmake CMAKE_OPTION="-DENABLE_GCOV=yes -DUSE_VALGRIND=no" COVERALLS=yes
    - compiler: clang
      env: BUILD=cmake CMAKE_OPTION="-DWITH_STATIC_SQLITE3=yes"
    - compiler: gcc
      env: BUILD=autotools CONFIGURE_OPTION="--with-static_sqlite3=yes"
    - compiler: gcc
      env: BUILD=cmake CMAKE_OPTION="-DWITH_SQLITE3=no"
    - compiler: clang
      env: BUILD=autotools CONFIGURE_OPTION="--with-sqlite3=no"

script:
  - if [ x$BUILD == xautotools ]; then ./autogen.sh && ./configure $CONFIGURE_OPTION && make CFLAGS="-Wall -Werror" && make check && make release; fi
  - if [ x$BUILD == xcmake ]; then CFLAGS="-Wall -Werror" cmake . $CMAKE_OPTION && make && make check; fi

before_install:
  - sudo pip install cpp-coveralls
  - sudo add-apt-repository --yes ppa:chewing/travis-ci
  - sudo apt-get update -qq
  - sudo apt-get install -qq texinfo cmake-data cmake valgrind libsqlite3-dev

after_success:
  - if [ x$COVERALLS == xyes ]; then coveralls --exclude src/tools --exclude contrib --exclude test --exclude thirdparty --exclude-pattern '.*CMake[^/]+\.c(?:pp)?' --exclude-pattern '.*/[_A-Z0-9]+\.c(?:pp)?' --exclude-pattern '[^\.]*\.h'; fi

addons:
    coverity_scan:
        project:
            name: "chewing/libchewing"
            description: "Build submitted via Travis CI"
        notification_email: chewing-devel@googlegroups.com
        build_command_prepend: "./autogen.sh; ./configure; make clean"
        build_command:   "make -j 4"
        branch_pattern: coverity_scan
